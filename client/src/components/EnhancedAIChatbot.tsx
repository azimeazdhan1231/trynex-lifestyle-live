import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MessageCircle, Send, X, Bot, User, Minimize2, Maximize2, Mic, MicOff, Volume2, VolumeX, Loader2 } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { formatPrice, COMPANY_NAME, WHATSAPP_NUMBER } from "@/lib/constants";
import type { Product } from "@shared/schema";

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
  products?: Product[];
}

interface AIChatbotProps {
  onProductSelect?: (product: Product) => void;
}

// Business data for the AI
const BUSINESS_DATA = {
  name: "Trynex Lifestyle",
  description: "ржЖржзрзБржирж┐ржХ рж▓рж╛ржЗржлрж╕рзНржЯрж╛ржЗрж▓ ржкржгрзНржпрзЗрж░ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕржирж▓рж╛ржЗржи рж╢ржк",
  categories: ["ржлрзНржпрж╛рж╢ржи", "ржЗрж▓рзЗржХржЯрзНрж░ржирж┐ржХрзНрж╕", "ржЧрж┐ржлржЯ ржЖржЗржЯрзЗржо", "рж╣рзЛржо ржбрзЗржХрзЛрж░", "ржмрж┐ржЙржЯрж┐ ржкржгрзНржп"],
  features: [
    "ржжрзНрж░рзБржд ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ (ржврж╛ржХрж╛ржпрж╝ рзирзк ржШржирзНржЯрж╛)",
    "ржиржЧржжрзЗ ржкрзЗржорзЗржирзНржЯ",
    "ржмрж┐ржирж╛ржорзВрж▓рзНржпрзЗ рж░рж┐ржЯрж╛рж░рзНржи ржкрж▓рж┐рж╕рж┐",
    "рззрзжрзж% ржЕрж░рж┐ржЬрж┐ржирж╛рж▓ ржкржгрзНржп",
    "ржХрж╛рж╕рзНржЯржорж╛ржЗржЬрзЗрж╢ржи рж╕рзБржмрж┐ржзрж╛"
  ],
  contact: {
    whatsapp: WHATSAPP_NUMBER,
    support: "рзирзк/рзн ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛ржкрзЛрж░рзНржЯ",
    delivery: "ржврж╛ржХрж╛: рзорзж ржЯрж╛ржХрж╛, ржврж╛ржХрж╛рж░ ржмрж╛ржЗрж░рзЗ: рзорзж-рззрзирзж ржЯрж╛ржХрж╛"
  },
  policies: {
    return: "рзн ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗ рж░рж┐ржЯрж╛рж░рзНржи",
    warranty: "рзз ржмржЫрж░ ржУржпрж╝рж╛рж░рзЗржирзНржЯрж┐",
    payment: "ржмрж┐ржХрж╛рж╢, ржиржЧржж, ржХрзНржпрж╛рж╢ ржЕржи ржбрзЗрж▓рж┐ржнрж╛рж░рж┐"
  }
};

export default function EnhancedAIChatbot({ onProductSelect }: AIChatbotProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      role: 'assistant',
      content: `ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ЁЯМЯ ржЖржорж┐ ${BUSINESS_DATA.name} ржПрж░ AI рж╕рж╣рж╛ржпрж╝ржХред 

ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:
тАв ржкржгрзНржп ржЦрзБржБржЬрзЗ ржжрж┐рждрзЗ ржПржмржВ рж╕рзБржкрж╛рж░рж┐рж╢ ржХрж░рждрзЗ
тАв ржЕрж░рзНржбрж╛рж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржпрж╝ ржЧрж╛ржЗржб ржХрж░рждрзЗ
тАв ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржУ ржкрзЗржорзЗржирзНржЯ рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп ржжрж┐рждрзЗ
тАв ржХрж╛рж╕рзНржЯржорж╛ржЗржЬрзЗрж╢ржи рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рждрзЗ
тАв ржЧрж┐ржлржЯ ржЖржЗржЯрзЗржо ржирж┐рж░рзНржмрж╛ржЪржирзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ
тАв ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржпрзЗржХрзЛржирзЛ ржмрж┐рж╖ржпрж╝рзЗ ржЖрж▓рзЛржЪржирж╛ ржХрж░рждрзЗ

ржХрзА ржЦрзБржБржЬржЫрзЗржи? ЁЯЫНя╕П`,
      timestamp: new Date().toLocaleTimeString('bn-BD')
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [conversationHistory, setConversationHistory] = useState<string[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const recognitionRef = useRef<any>(null);

  // Get products for search functionality
  const { data: products = [] } = useQuery<Product[]>({
    queryKey: ["/api/products"],
    staleTime: 1000 * 60 * 5,
  });

  // Initialize speech recognition
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = 'bn-BD';

      recognitionRef.current.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setInputMessage(transcript);
        setIsListening(false);
      };

      recognitionRef.current.onerror = () => {
        setIsListening(false);
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    }
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const speakMessage = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'bn-BD';
      utterance.rate = 0.8;
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      speechSynthesis.speak(utterance);
    }
  };

  const stopSpeaking = () => {
    if ('speechSynthesis' in window) {
      speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      setIsListening(true);
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
      setIsListening(false);
    }
  };

  const getAIResponse = async (userMessage: string): Promise<string> => {
    try {
      const response = await fetch('/api/ai-chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: userMessage,
          businessData: BUSINESS_DATA,
          products: products.slice(0, 20), // Send sample products
          chatHistory: messages.slice(-6)
        })
      });

      if (!response.ok) {
        console.warn('AI API failed, using fallback');
        return generateFallbackResponse(userMessage);
      }

      const data = await response.json();
      return data.reply || data.fallback || generateFallbackResponse(userMessage);
    } catch (error) {
      console.error('AI Chat Error:', error);
      return generateFallbackResponse(userMessage);
    }
  };

  const generateFallbackResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();

    if (message.includes('ржкржгрзНржп') || message.includes('product') || message.includes('ржЖржЗржЯрзЗржо')) {
      const randomProducts = products.slice(0, 3);
      return `ржЖржорж╛ржжрзЗрж░ ржЬржиржкрзНрж░рж┐ржпрж╝ ржкржгрзНржп:\n${randomProducts.map(p => `тАв ${p.name} - ${formatPrice(Number(p.price))}`).join('\n')}\n\nржЖрж░рзЛ ржжрзЗржЦрждрзЗ "рж╕ржм ржкржгрзНржп" ржмрж▓рзБржиред`;
    }

    if (message.includes('ржбрзЗрж▓рж┐ржнрж╛рж░рж┐') || message.includes('delivery')) {
      return `ЁЯУж ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рждржерзНржп:\nтАв ржврж╛ржХрж╛ржпрж╝: рзорзж ржЯрж╛ржХрж╛ (рзирзк ржШржирзНржЯрж╛)\nтАв ржврж╛ржХрж╛рж░ ржмрж╛ржЗрж░рзЗ: рзорзж-рззрзирзж ржЯрж╛ржХрж╛ (рзи-рзй ржжрж┐ржи)\nтАв ржмрж┐ржирж╛ржорзВрж▓рзНржпрзЗ рж░рж┐ржЯрж╛рж░рзНржи рзн ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗ`;
    }

    if (message.includes('ржкрзЗржорзЗржирзНржЯ') || message.includes('payment')) {
      return `ЁЯТ│ ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐:\nтАв ржмрж┐ржХрж╛рж╢/ржиржЧржж\nтАв ржХрзНржпрж╛рж╢ ржЕржи ржбрзЗрж▓рж┐ржнрж╛рж░рж┐\nтАв ржЕржирж▓рж╛ржЗржи ржкрзЗржорзЗржирзНржЯ\n\nрж╕ржмржЧрзБрж▓рзЛ ржирж┐рж░рж╛ржкржж ржУ рж╕рзБржмрж┐ржзрж╛ржЬржиржХ!`;
    }

    if (message.includes('ржпрзЛржЧрж╛ржпрзЛржЧ') || message.includes('contact')) {
      return `ЁЯУЮ ржпрзЛржЧрж╛ржпрзЛржЧ:\nтАв рж╣рзЛржпрж╝рж╛ржЯрж╕ржЕрзНржпрж╛ржк: ${WHATSAPP_NUMBER}\nтАв рзирзк/рзн ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛ржкрзЛрж░рзНржЯ\nтАв рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп ржХрж▓ ржХрж░рзБржи`;
    }

    return `ржзржирзНржпржмрж╛ржж! ржЖржорж┐ ${BUSINESS_DATA.name} ржПрж░ AI рж╕рж╣рж╛ржпрж╝ржХред ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ:\n\nтАв "ржкржгрзНржп ржжрзЗржЦрж╛ржи" - рж╕ржм ржкржгрзНржп ржжрзЗржЦрждрзЗ\nтАв "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐" - ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рждржерзНржп\nтАв "ржкрзЗржорзЗржирзНржЯ" - ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐\nтАв "ржпрзЛржЧрж╛ржпрзЛржЧ" - ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛ржкрзЛрж░рзНржЯ\n\nржмрж▓рзБржи, ржЖрж░ ржЖржорж┐ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржм! ЁЯШК`;
  };

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: inputMessage,
      timestamp: new Date().toLocaleTimeString('bn-BD')
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      const aiReply = await getAIResponse(inputMessage);

      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: aiReply,
        timestamp: new Date().toLocaleTimeString('bn-BD')
      };

      setMessages(prev => [...prev, assistantMessage]);

      // Auto-speak response if not too long
      if (aiReply.length < 200) {
        setTimeout(() => speakMessage(aiReply), 500);
      }

    } catch (error) {
      console.error('Chat error:', error);
      // Add error message to chat
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: generateFallbackResponse(inputMessage),
        timestamp: new Date().toLocaleTimeString('bn-BD')
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  if (!isOpen) {
    return (
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 z-50 w-14 h-14 rounded-full bg-gradient-to-r from-primary to-emerald-600 hover:from-primary/90 hover:to-emerald-700 shadow-xl animate-pulse"
        size="lg"
      >
        <MessageCircle className="w-6 h-6 text-white" />
      </Button>
    );
  }

  return (
    <Card className={`fixed bottom-6 right-6 z-50 w-80 md:w-96 bg-white shadow-2xl border-0 transition-all duration-300 ${
      isMinimized ? 'h-16' : 'h-96'
    }`}>
      <CardHeader className="p-4 bg-gradient-to-r from-primary to-emerald-600 text-white rounded-t-lg">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Bot className="w-5 h-5" />
            <CardTitle className="text-sm font-semibold">Trynex AI рж╕рж╣рж╛ржпрж╝ржХ</CardTitle>
          </div>
          <div className="flex items-center space-x-1">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsMinimized(!isMinimized)}
              className="text-white hover:bg-white/20 p-1 h-auto"
            >
              {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="text-white hover:bg-white/20 p-1 h-auto"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </CardHeader>

      {!isMinimized && (
        <CardContent className="p-0 flex flex-col h-80">
          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-3">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] p-3 rounded-lg ${
                    message.role === 'user'
                      ? 'bg-primary text-white'
                      : 'bg-gray-100 text-gray-800'
                  }`}
                >
                  <div className="text-sm whitespace-pre-wrap">{message.content}</div>
                  <div className="text-xs opacity-70 mt-1">{message.timestamp}</div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 p-3 rounded-lg">
                  <Loader2 className="w-4 h-4 animate-spin" />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t">
            <div className="flex items-center space-x-2">
              <div className="flex-1 relative">
                <Input
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи..."
                  className="pr-20"
                  disabled={isLoading}
                />
                <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center space-x-1">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={isListening ? stopListening : startListening}
                    className="p-1 h-auto text-gray-500 hover:text-primary"
                  >
                    {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={isSpeaking ? stopSpeaking : () => {}}
                    className="p-1 h-auto text-gray-500 hover:text-primary"
                  >
                    {isSpeaking ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
                  </Button>
                </div>
              </div>
              <Button
                onClick={sendMessage}
                disabled={!inputMessage.trim() || isLoading}
                size="sm"
                className="bg-primary hover:bg-primary/90"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      )}
    </Card>
  );
}