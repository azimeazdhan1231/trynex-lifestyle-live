import { useState, useCallback, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { queryClient } from "@/lib/queryClient";
import DynamicResponsiveModal from "@/components/dynamic-responsive-modal";
import {
  Package,
  Shirt,
  Palette,
  Type,
  Upload,
  MessageCircle,
  User,
  Phone,
  Mail,
  MapPin,
  CreditCard,
  CheckCircle
} from "lucide-react";
import type { Product } from "@shared/schema";

interface EnhancedCustomizeModalProps {
  isOpen: boolean;
  onClose: () => void;
  product: Product;
  onAddToCart?: (product: Product, customization: any) => Promise<void>;
  onOrderComplete?: () => void;
}

const SIZES = ["XS", "S", "M", "L", "XL", "XXL"];
const COLORS = [
  { value: "red", name: "‡¶≤‡¶æ‡¶≤", color: "#EF4444" },
  { value: "blue", name: "‡¶®‡ßÄ‡¶≤", color: "#3B82F6" },
  { value: "green", name: "‡¶∏‡¶¨‡ßÅ‡¶ú", color: "#10B981" },
  { value: "black", name: "‡¶ï‡¶æ‡¶≤‡ßã", color: "#1F2937" },
  { value: "white", name: "‡¶∏‡¶æ‡¶¶‡¶æ", color: "#F9FAFB" },
  { value: "yellow", name: "‡¶π‡¶≤‡ßÅ‡¶¶", color: "#F59E0B" },
];
const PRINT_AREAS = ["‡¶∏‡¶æ‡¶Æ‡¶®‡ßá", "‡¶™‡ßá‡¶õ‡¶®‡ßá", "‡¶â‡¶≠‡¶Ø‡¶º ‡¶™‡¶æ‡¶∂", "‡¶π‡¶æ‡¶§‡¶æ"];

export default function EnhancedCustomizeModal({
  isOpen,
  onClose,
  product,
  onAddToCart,
  onOrderComplete
}: EnhancedCustomizeModalProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const [customization, setCustomization] = useState({
    size: "",
    color: "",
    printArea: "",
    customText: "",
    specialInstructions: "",
    uploadedImages: [] as File[],
    quantity: 1,
    customerName: "",
    customerPhone: "",
    customerEmail: "",
    customerAddress: ""
  });

  const basePrice = parseFloat(product.price) || 0;
  const customizationFee = 50;
  const totalPrice = (basePrice + customizationFee) * customization.quantity;
  const advancePayment = 100;

  const validateStep1 = () => {
    if (!customization.size || !customization.color) {
      toast({
        title: "‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£",
        description: "‡¶∏‡¶æ‡¶á‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶∞‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
        variant: "destructive"
      });
      return false;
    }
    return true;
  };

  const validateStep2 = () => {
    if (!customization.customerName || !customization.customerPhone) {
      toast({
        title: "‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£",
        description: "‡¶®‡¶æ‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
        variant: "destructive"
      });
      return false;
    }
    return true;
  };

  const handleNextStep = () => {
    if (currentStep === 1 && validateStep1()) {
      setCurrentStep(2);
    } else if (currentStep === 2 && validateStep2()) {
      setCurrentStep(3);
    }
  };

  const handleSubmitOrder = async () => {
    if (!validateStep2()) return;

    setIsSubmitting(true);
    
    try {
      const orderData = {
        productId: product.id,
        customerName: customization.customerName,
        customerPhone: customization.customerPhone,
        customerEmail: customization.customerEmail || null,
        customerAddress: customization.customerAddress || null,
        customizationData: {
          size: customization.size,
          color: customization.color,
          printArea: customization.printArea,
          customText: customization.customText,
          specialInstructions: customization.specialInstructions,
          uploadedImages: customization.uploadedImages.map(file => file.name)
        },
        totalPrice: totalPrice.toString(),
        status: "pending_advance_payment"
      };

      const result = await apiRequest('POST', '/api/custom-orders', orderData);

      // Invalidate queries to refresh data
      await queryClient.invalidateQueries({ queryKey: ['/api/custom-orders'] });

      toast({
        title: "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤!",
        description: `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ó‡ßÉ‡¶π‡ßÄ‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: ${result.id}`,
      });

      // Create WhatsApp message for advance payment
      const whatsappMessage = `‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ! ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡•§

üìã ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø:
‡¶™‡¶£‡ßç‡¶Ø: ${product.name}
‡¶∏‡¶æ‡¶á‡¶ú: ${customization.size}
‡¶∞‡¶Ç: ${COLORS.find(c => c.value === customization.color)?.name}
‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ${customization.quantity}
‡¶Æ‡ßã‡¶ü ‡¶¶‡¶æ‡¶Æ: ‡ß≥${totalPrice}
‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶≠‡¶æ‡¶®‡ßç‡¶∏: ‡ß≥${advancePayment}

üë§ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶§‡¶•‡ßç‡¶Ø:
‡¶®‡¶æ‡¶Æ: ${customization.customerName}
‡¶´‡ßã‡¶®: ${customization.customerPhone}
${customization.customerEmail ? `‡¶á‡¶Æ‡ßá‡¶á‡¶≤: ${customization.customerEmail}` : ''}

üìù ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®:
‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ: ${customization.printArea}
${customization.customText ? `‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü: ${customization.customText}` : ''}
${customization.specialInstructions ? `‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ: ${customization.specialInstructions}` : ''}

‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: ${result.id}

‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡ßß‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶≠‡¶æ‡¶®‡ßç‡¶∏ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`;

      // Open WhatsApp with the message
      const whatsappUrl = `https://wa.me/8801765555593?text=${encodeURIComponent(whatsappMessage)}`;
      window.open(whatsappUrl, '_blank');

      onClose();
      if (onOrderComplete) onOrderComplete();

    } catch (error: any) {
      console.error('Error creating custom order:', error);
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderStep1 = () => (
    <div className="space-y-6">
      {/* Product Preview */}
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-lg text-white">‡¶™‡¶£‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-4">
            {product.image_url && (
              <img
                src={product.image_url}
                alt={product.name}
                className="w-20 h-20 object-cover rounded-lg border border-gray-600"
              />
            )}
            <div>
              <h3 className="font-semibold text-white">{product.name}</h3>
              <p className="text-gray-300">‡¶¨‡ßá‡¶∏ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏: ‡ß≥{basePrice}</p>
              <p className="text-sm text-gray-400">‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ‡¶´‡¶ø: ‡ß≥{customizationFee}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Size Selection */}
      <div className="space-y-3">
        <Label className="text-sm font-medium text-white">
          <Shirt className="w-4 h-4 inline mr-2" />
          ‡¶∏‡¶æ‡¶á‡¶ú ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® *
        </Label>
        <div className="grid grid-cols-3 gap-2">
          {SIZES.map((size) => (
            <Button
              key={size}
              variant={customization.size === size ? "default" : "outline"}
              size="sm"
              onClick={() => setCustomization(prev => ({ ...prev, size }))}
              className={customization.size === size 
                ? "bg-blue-600 text-white" 
                : "text-white border-gray-600 hover:bg-gray-700"
              }
            >
              {size}
            </Button>
          ))}
        </div>
      </div>

      {/* Color Selection */}
      <div className="space-y-3">
        <Label className="text-sm font-medium text-white">
          <Palette className="w-4 h-4 inline mr-2" />
          ‡¶∞‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® *
        </Label>
        <div className="grid grid-cols-3 sm:grid-cols-6 gap-3">
          {COLORS.map((color) => (
            <Button
              key={color.value}
              variant="outline"
              size="sm"
              onClick={() => setCustomization(prev => ({ ...prev, color: color.value }))}
              className={`h-12 border-2 text-white ${
                customization.color === color.value 
                  ? "border-blue-500 bg-blue-600/20" 
                  : "border-gray-600 hover:bg-gray-700"
              }`}
            >
              <div 
                className="w-6 h-6 rounded-full mr-2"
                style={{ backgroundColor: color.color }}
              />
              {color.name}
            </Button>
          ))}
        </div>
      </div>

      {/* Print Area */}
      <div className="space-y-3">
        <Label className="text-sm font-medium text-white">‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ</Label>
        <div className="grid grid-cols-2 gap-2">
          {PRINT_AREAS.map((area) => (
            <Button
              key={area}
              variant={customization.printArea === area ? "default" : "outline"}
              size="sm"
              onClick={() => setCustomization(prev => ({ ...prev, printArea: area }))}
              className={customization.printArea === area 
                ? "bg-blue-600 text-white" 
                : "text-white border-gray-600 hover:bg-gray-700"
              }
            >
              {area}
            </Button>
          ))}
        </div>
      </div>

      {/* Custom Text */}
      <div className="space-y-3">
        <Label className="text-sm font-medium text-white">
          <Type className="w-4 h-4 inline mr-2" />
          ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
        </Label>
        <Input
          value={customization.customText}
          onChange={(e) => setCustomization(prev => ({ ...prev, customText: e.target.value }))}
          placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
          className="bg-gray-800 border-gray-600 text-white placeholder:text-gray-400"
        />
      </div>

      {/* Special Instructions */}
      <div className="space-y-3">
        <Label className="text-sm font-medium text-white">‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ</Label>
        <Textarea
          value={customization.specialInstructions}
          onChange={(e) => setCustomization(prev => ({ ...prev, specialInstructions: e.target.value }))}
          placeholder="‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
          className="bg-gray-800 border-gray-600 text-white placeholder:text-gray-400 min-h-[80px]"
        />
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="space-y-6">
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-lg text-white flex items-center gap-2">
            <User className="w-5 h-5" />
            ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm font-medium text-white">‡¶®‡¶æ‡¶Æ *</Label>
              <Input
                value={customization.customerName}
                onChange={(e) => setCustomization(prev => ({ ...prev, customerName: e.target.value }))}
                placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                className="bg-gray-800 border-gray-600 text-white placeholder:text-gray-400"
              />
            </div>
            <div>
              <Label className="text-sm font-medium text-white">‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ *</Label>
              <Input
                value={customization.customerPhone}
                onChange={(e) => setCustomization(prev => ({ ...prev, customerPhone: e.target.value }))}
                placeholder="01XXXXXXXXX"
                className="bg-gray-800 border-gray-600 text-white placeholder:text-gray-400"
              />
            </div>
          </div>
          <div>
            <Label className="text-sm font-medium text-white">‡¶á‡¶Æ‡ßá‡¶á‡¶≤ (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)</Label>
            <Input
              value={customization.customerEmail}
              onChange={(e) => setCustomization(prev => ({ ...prev, customerEmail: e.target.value }))}
              placeholder="your@email.com"
              type="email"
              className="bg-gray-800 border-gray-600 text-white placeholder:text-gray-400"
            />
          </div>
          <div>
            <Label className="text-sm font-medium text-white">‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ *</Label>
            <Textarea
              value={customization.customerAddress}
              onChange={(e) => setCustomization(prev => ({ ...prev, customerAddress: e.target.value }))}
              placeholder="‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶¨‡¶æ‡¶°‡¶º‡¶ø ‡¶®‡¶Ç, ‡¶∞‡¶æ‡¶∏‡ßç‡¶§‡¶æ, ‡¶•‡¶æ‡¶®‡¶æ, ‡¶ú‡ßá‡¶≤‡¶æ)"
              className="bg-gray-800 border-gray-600 text-white placeholder:text-gray-400 min-h-[80px]"
            />
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-6">
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-lg text-white flex items-center gap-2">
            <CheckCircle className="w-5 h-5" />
            ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶∞‡¶ø
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex justify-between text-white">
              <span>‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ:</span>
              <span>‡ß≥{basePrice}</span>
            </div>
            <div className="flex justify-between text-white">
              <span>‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ‡¶´‡¶ø:</span>
              <span>‡ß≥{customizationFee}</span>
            </div>
            <div className="flex justify-between text-white">
              <span>‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£:</span>
              <span>{customization.quantity}</span>
            </div>
            <div className="border-t border-gray-600 pt-2">
              <div className="flex justify-between font-bold text-lg text-white">
                <span>‡¶Æ‡ßã‡¶ü ‡¶¶‡¶æ‡¶Æ:</span>
                <span className="text-green-400">‡ß≥{totalPrice}</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="border-2 border-yellow-600 bg-yellow-900/20">
        <CardHeader>
          <CardTitle className="text-lg text-yellow-300 flex items-center gap-2">
            <CreditCard className="w-5 h-5" />
            ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶≠‡¶æ‡¶®‡ßç‡¶∏ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-yellow-300">‡¶è‡¶ñ‡¶®‡¶á ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá:</span>
              <span className="font-bold text-2xl text-yellow-300">‡ß≥{advancePayment}</span>
            </div>
            <div className="text-sm text-yellow-300">
              <p>‚Ä¢ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡ßß‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶≠‡¶æ‡¶®‡ßç‡¶∏ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®</p>
              <p>‚Ä¢ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá</p>
              <p>‚Ä¢ ‡¶π‡ßã‡¶Ø‡¶º‡¶æ‡¶ü‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const getStepTitle = () => {
    switch (currentStep) {
      case 1: return "‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®";
      case 2: return "‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø";
      case 3: return "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ";
      default: return "‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®";
    }
  };

  return (
    <DynamicResponsiveModal
      isOpen={isOpen}
      onClose={onClose}
      title={`${getStepTitle()} - ${product.name}`}
      description={`‡¶ß‡¶æ‡¶™ ${currentStep}/3`}
      size="xl"
      className="max-h-[90vh] overflow-y-auto"
    >
      <div className="space-y-6 text-white">
        {/* Progress Steps */}
        <div className="flex items-center justify-between mb-6">
          {[1, 2, 3].map((step) => (
            <div key={step} className="flex items-center">
              <div className={`
                w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold
                ${step <= currentStep 
                  ? "bg-blue-600 text-white" 
                  : "bg-gray-700 text-gray-400"
                }
              `}>
                {step}
              </div>
              {step < 3 && (
                <div className={`
                  w-16 h-1 mx-2
                  ${step < currentStep ? "bg-blue-600" : "bg-gray-700"}
                `} />
              )}
            </div>
          ))}
        </div>

        {/* Step Content */}
        {currentStep === 1 && renderStep1()}
        {currentStep === 2 && renderStep2()}
        {currentStep === 3 && renderStep3()}

        {/* Action Buttons */}
        <div className="flex justify-between pt-6 border-t border-gray-700">
          {currentStep > 1 ? (
            <Button
              variant="outline"
              onClick={() => setCurrentStep(currentStep - 1)}
              className="text-white border-gray-600 hover:bg-gray-700"
            >
              ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ
            </Button>
          ) : (
            <div />
          )}

          {currentStep < 3 ? (
            <Button onClick={handleNextStep} className="bg-blue-600 hover:bg-blue-700 text-white">
              ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ
            </Button>
          ) : (
            <Button 
              onClick={handleSubmitOrder} 
              disabled={isSubmitting}
              className="bg-green-600 hover:bg-green-700 text-white"
            >
              {isSubmitting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç...
                </>
              ) : (
                <>
                  <MessageCircle className="w-4 h-4 mr-2" />
                  ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®
                </>
              )}
            </Button>
          )}
        </div>
      </div>
    </DynamicResponsiveModal>
  );
}