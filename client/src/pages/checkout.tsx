
import { useState, useEffect } from 'react';
import { useLocation } from 'wouter';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { ArrowLeft, Package, CreditCard, MapPin, User, Phone } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { formatPrice } from '@/lib/constants';
import MobileOptimizedLayout from '@/components/mobile-optimized-layout';

const DISTRICTS = [
  '‡¶¢‡¶æ‡¶ï‡¶æ', '‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ', '‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ', '‡¶∏‡¶ø‡¶≤‡ßá‡¶ü', '‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤', '‡¶∞‡¶Ç‡¶™‡ßÅ‡¶∞', '‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶®‡¶∏‡¶ø‡¶Ç‡¶π', '‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ'
];

export default function Checkout() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const [customOrderData, setCustomOrderData] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  const [formData, setFormData] = useState({
    customer_name: '',
    phone: '',
    district: '',
    thana: '',
    address: '',
    payment_method: 'cash_on_delivery',
    special_instructions: ''
  });

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const isCustomOrder = urlParams.get('customOrder') === 'true';
    
    if (isCustomOrder) {
      const pendingOrder = localStorage.getItem('pendingCustomOrder');
      if (pendingOrder) {
        try {
          const orderData = JSON.parse(pendingOrder);
          setCustomOrderData(orderData);
        } catch (error) {
          console.error('Error parsing custom order data:', error);
          toast({
            title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
            description: "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
            variant: "destructive"
          });
        }
      }
    }
  }, [toast]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.customer_name.trim() || !formData.phone.trim() || !formData.address.trim()) {
      toast({
        title: "‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£",
        description: "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶ï‡¶≤ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    
    try {
      const orderPayload = {
        ...customOrderData,
        ...formData,
        orderType: 'custom',
        createdAt: new Date().toISOString()
      };

      const response = await fetch('/api/custom-orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderPayload)
      });

      if (!response.ok) {
        throw new Error('‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
      }

      const result = await response.json();
      
      // Clear the stored order data
      localStorage.removeItem('pendingCustomOrder');
      
      toast({
        title: "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤! üéâ",
        description: `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ID: ${result.trackingId || result.id}`,
      });

      // Redirect to success page or home
      setLocation('/orders');
      
    } catch (error) {
      console.error('Order submission error:', error);
      toast({
        title: "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•",
        description: "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (!customOrderData) {
    return (
      <MobileOptimizedLayout>
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <Card className="p-6 text-center">
            <CardContent>
              <Package className="w-16 h-16 mx-auto mb-4 text-gray-400" />
              <h2 className="text-xl font-bold text-gray-800 mb-2">‡¶ï‡ßã‡¶® ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø</h2>
              <p className="text-gray-600 mb-4">‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</p>
              <Button onClick={() => setLocation('/')}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                ‡¶π‡ßã‡¶Æ‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®
              </Button>
            </CardContent>
          </Card>
        </div>
      </MobileOptimizedLayout>
    );
  }

  return (
    <MobileOptimizedLayout>
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="container mx-auto px-4 max-w-4xl">
          <div className="flex items-center gap-4 mb-6">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setLocation('/')}
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï‡¶Ü‡¶â‡¶ü</h1>
              <p className="text-gray-600">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú‡¶° ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®</p>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Order Summary */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Package className="w-5 h-5" />
                  ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶∞‡¶ø
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex gap-4">
                  <div className="w-20 h-20 bg-gray-100 rounded-lg flex items-center justify-center">
                    <Package className="w-8 h-8 text-gray-400" />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-semibold">{customOrderData.productName}</h4>
                    <p className="text-sm text-gray-600">‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: {customOrderData.quantity}</p>
                    <p className="text-lg font-bold text-green-600">{formatPrice(customOrderData.totalAmount)}</p>
                  </div>
                </div>

                {/* Customization Details */}
                {customOrderData.customization && (
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h5 className="font-semibold text-blue-800 mb-2">‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£:</h5>
                    <div className="space-y-2 text-sm">
                      {customOrderData.customization.size && (
                        <p><strong>‡¶∏‡¶æ‡¶á‡¶ú:</strong> {customOrderData.customization.size}</p>
                      )}
                      {customOrderData.customization.color && (
                        <p><strong>‡¶∞‡¶Ç:</strong> {customOrderData.customization.color}</p>
                      )}
                      {customOrderData.customization.material && (
                        <p><strong>‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶®:</strong> {customOrderData.customization.material}</p>
                      )}
                      {customOrderData.customization.text && (
                        <p><strong>‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü:</strong> "{customOrderData.customization.text}"</p>
                      )}
                      {customOrderData.customization.specialInstructions && (
                        <p><strong>‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:</strong> {customOrderData.customization.specialInstructions}</p>
                      )}
                    </div>
                  </div>
                )}

                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">
                    ‡¶Æ‡ßã‡¶ü: {formatPrice(customOrderData.totalAmount)}
                  </div>
                  <p className="text-sm text-gray-600 mt-1">‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶∏‡¶π</p>
                </div>
              </CardContent>
            </Card>

            {/* Checkout Form */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="w-5 h-5" />
                  ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶§‡¶•‡ßç‡¶Ø
                </CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <Label htmlFor="customer_name">‡¶®‡¶æ‡¶Æ *</Label>
                    <Input
                      id="customer_name"
                      value={formData.customer_name}
                      onChange={(e) => setFormData(prev => ({ ...prev, customer_name: e.target.value }))}
                      placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ"
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="phone">‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ *</Label>
                    <Input
                      id="phone"
                      value={formData.phone}
                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                      placeholder="01XXXXXXXXX"
                      required
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="district">‡¶ú‡ßá‡¶≤‡¶æ *</Label>
                      <Select value={formData.district} onValueChange={(value) => setFormData(prev => ({ ...prev, district: value }))}>
                        <SelectTrigger>
                          <SelectValue placeholder="‡¶ú‡ßá‡¶≤‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                        </SelectTrigger>
                        <SelectContent>
                          {DISTRICTS.map((district) => (
                            <SelectItem key={district} value={district}>{district}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="thana">‡¶•‡¶æ‡¶®‡¶æ</Label>
                      <Input
                        id="thana"
                        value={formData.thana}
                        onChange={(e) => setFormData(prev => ({ ...prev, thana: e.target.value }))}
                        placeholder="‡¶•‡¶æ‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ"
                      />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="address">‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ *</Label>
                    <Textarea
                      id="address"
                      value={formData.address}
                      onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
                      placeholder="‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                      required
                      rows={3}
                    />
                  </div>

                  <div>
                    <Label htmlFor="payment_method">‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø</Label>
                    <Select value={formData.payment_method} onValueChange={(value) => setFormData(prev => ({ ...prev, payment_method: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="cash_on_delivery">‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶Ö‡¶® ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø</SelectItem>
                        <SelectItem value="bkash">‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂</SelectItem>
                        <SelectItem value="nagad">‡¶®‡¶ó‡¶¶</SelectItem>
                        <SelectItem value="rocket">‡¶∞‡¶ï‡ßá‡¶ü</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="special_instructions">‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)</Label>
                    <Textarea
                      id="special_instructions"
                      value={formData.special_instructions}
                      onChange={(e) => setFormData(prev => ({ ...prev, special_instructions: e.target.value }))}
                      placeholder="‡¶ï‡ßã‡¶® ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                      rows={2}
                    />
                  </div>

                  <Button
                    type="submit"
                    className="w-full bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white"
                    disabled={isLoading}
                  >
                    <CreditCard className="w-4 h-4 mr-2" />
                    {isLoading ? '‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£...' : '‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®'}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </MobileOptimizedLayout>
  );
}
