import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import { products } from '../shared/schema';
import { eq, or, isNull } from 'drizzle-orm';

const sql = neon(process.env.DATABASE_URL!);
const db = drizzle(sql);

const defaultDescriptionTemplate = (productName: string, productType: string) => {
  let specificDescription = '';
  
  if (productType.includes('ржЯрж┐-рж╢рж╛рж░рзНржЯ')) {
    specificDescription = 'ржХрж╛рж╕рзНржЯржо ржЯрж┐-рж╢рж╛рж░рзНржЯ ( ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржХржЯржи) ржПржХржЯрж┐ ржЙржЪрзНржЪржорж╛ржирзЗрж░ ржкржгрзНржп ржпрж╛ ржЖржкржирж╛рж░ ржкрзНрж░рждрзНржпрж╛рж╢рж╛ ржкрзВрж░ржг ржХрж░ржмрзЗред';
  } else if (productType.includes('ржоржЧ')) {
    specificDescription = 'ржХрж╛рж╕рзНржЯржо ржоржЧ ржПржХржЯрж┐ ржЙржЪрзНржЪржорж╛ржирзЗрж░ ржкржгрзНржп ржпрж╛ ржЖржкржирж╛рж░ ржкрзНрж░рждрзНржпрж╛рж╢рж╛ ржкрзВрж░ржг ржХрж░ржмрзЗред';
  } else if (productType.includes('ржмрзЛрждрж▓')) {
    specificDescription = 'ржерж╛рж░рзНржорзЛрж╕рзНржЯрж┐рж▓ ржмрзЛрждрж▓ ржПржХржЯрж┐ ржЙржЪрзНржЪржорж╛ржирзЗрж░ ржкржгрзНржп ржпрж╛ ржЖржкржирж╛рж░ ржкрзНрж░рждрзНржпрж╛рж╢рж╛ ржкрзВрж░ржг ржХрж░ржмрзЗред';
  } else {
    specificDescription = `${productName} ржПржХржЯрж┐ ржЙржЪрзНржЪржорж╛ржирзЗрж░ ржкржгрзНржп ржпрж╛ ржЖржкржирж╛рж░ ржкрзНрж░рждрзНржпрж╛рж╢рж╛ ржкрзВрж░ржг ржХрж░ржмрзЗред`;
  }

  return `ржкржгрзНржпрзЗрж░ ржмрж┐ржмрж░ржг:
${specificDescription} ржЖржорж╛ржжрзЗрж░ рж╕ржХрж▓ ржкржгрзНржп ржпрждрзНржирж╕рж╣ржХрж╛рж░рзЗ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржПржмржВ ржорж╛ржи ржирж┐ржпрж╝ржирзНрждрзНрж░рж┐рждред

ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рждржерзНржп:
тАв ржврж╛ржХрж╛ржпрж╝ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЪрж╛рж░рзНржЬ: рзорзж ржЯрж╛ржХрж╛
тАв ржврж╛ржХрж╛рж░ ржмрж╛ржЗрж░рзЗ: рзорзж-рззрзйрзж ржЯрж╛ржХрж╛
тАв ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕ржоржпрж╝: рзи-рзй ржХрж╛рж░рзНржпржжрж┐ржмрж╕
тАв ржЕржЧрзНрж░рж┐ржо ржкрзЗржорзЗржирзНржЯ ржкрзНрж░ржпрж╝рзЛржЬржи`;
};

export async function fixProductDescriptions() {
  console.log('ЁЯФз Starting to fix product descriptions...');
  
  try {
    // Get all products with null or empty descriptions
    const productsWithoutDescription = await db
      .select()
      .from(products)
      .where(
        or(
          isNull(products.description),
          eq(products.description, ''),
        )
      );

    console.log(`ЁЯУЭ Found ${productsWithoutDescription.length} products without descriptions`);

    // Update each product with proper description
    for (const product of productsWithoutDescription) {
      const newDescription = defaultDescriptionTemplate(product.name, product.name);
      
      await db
        .update(products)
        .set({ description: newDescription })
        .where(eq(products.id, product.id));
        
      console.log(`тЬЕ Updated description for: ${product.name}`);
    }

    console.log('ЁЯОЙ Successfully fixed all product descriptions');
    return { success: true, updated: productsWithoutDescription.length };
  } catch (error) {
    console.error('тЭМ Error fixing product descriptions:', error);
    throw error;
  }
}